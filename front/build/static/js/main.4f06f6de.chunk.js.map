{"version":3,"sources":["assets/icon.svg","assets/twitter.svg","redux/actions/actionTypes.ts","redux/states/loginState.ts","redux/states/mainState.ts","redux/states/selectState.ts","redux/store.ts","module/Loading/Loading.tsx","components/Login/LoginInputBox.tsx","components/Login/LoginButton.tsx","components/Button/ReturnButton.tsx","module/Login/Login.tsx","redux/container/loginContainer.ts","components/Button/ListButton.tsx","components/Button/CloseButton.tsx","module/List/List.tsx","components/Button/PlusButton.tsx","components/Profile/Profile.tsx","components/Total/Total.tsx","components/Toggle/Toggle.tsx","components/TextArea/TextArea.tsx","components/Button/AddTodoButton.tsx","module/AddTodo/AddTodo.tsx","redux/container/addTodoContainer.ts","components/Todo/Todo.tsx","redux/container/todoContainer.ts","module/Main/Main.tsx","redux/container/mainContainer.ts","components/Login/LoginSNS.tsx","module/Welcome/Welcome.tsx","redux/container/selectContainer.ts","App.tsx","index.tsx"],"names":["module","exports","actionCreator","actionCreatorFactory","selectActions","selectCreateAccountButton","selectLoginButton","backToTopButton","loginActions","inputName","inputEmail","inputPassword","inputPasswordConfirmd","pushLoginButton","loadAllLoginInfo","async","mainButtonActions","pushDoListButton","pushDoneListButton","slideToggleButton","pushPlusButton","pushCloseButton","todoActions","inputTextarea","loadAllTodo","loginReducer","reducerWithInitialState","name","email","password","passwordConfirmd","loading","loginStatus","results","data","token","access_token","refresh_token","user","case","state","started","error","done","payload","result","failed","mainReducer","textarea","doList","doneList","toggle","puls","concat","selectReducer","createAccount","login","logger","createLogger","diff","collapsed","store","createStore","combineReducers","main","select","applyMiddleware","thunk","Loading","props","className","src","icon","alt","LoginInputBox","placeholder","type","onChange","LoginButton","value","onClick","buttonText","ReturnButton","Login","useState","setCreateAccount","useEffect","getState","dispatch","e","target","inputPasswordConfirmed","postSignUp","String","postLogIn","connect","appState","inputValue","passwordConfirmed","a","params","axios","post","password_confirmation","then","console","log","undefined","localStorage","accessToken","refreshToken","catch","ListButton","addClassName","CloseButton","map","fromMin","fromMax","toMin","toMax","dateShaping","processingDate","split","date","replace","substr","List","setDoList","todos","filter","item","progress","i","key","style","transform","background","updated_at","content","PlusButton","Profile","Total","title","Toggle","setToggle","subscribe","id","htmlFor","TextArea","rows","AddTodoButton","AddTodo","postTodo","timerId","headers","getItem","progressCounter","downSetInterval","event","itemProgress","setInterval","getElementsByTagName","cssText","upClearInterval","clearInterval","Todo","length","onMouseDown","currentTarget","onMouseUp","putTodo","onTouchStart","onTouchEnd","width","TODO_ENDPOINT","put","Main","plusButton","setPlusButton","toggleButton","setToggleButton","listButton","setListButton","setTimeout","getTodo","Fragment","get","Welcome","image","window","location","href","App","setLoading","setLoginStatus","setSelect","setLoadingTime","timeout","ReactDOM","render","Store","document","getElementById"],"mappings":"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","file":"static/js/main.4f06f6de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.9762d22f.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.50b6bd00.svg\";","import axios from \"axios\";\nimport actionCreatorFactory, { Action } from \"typescript-fsa\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Dispatch } from \"redux\";\nimport { AppState } from \"../store\";\n\nconst actionCreator = actionCreatorFactory();\n\n// アカウント作成 or ログインを選択するアクション\nexport const selectActions = {\n    selectCreateAccountButton: actionCreator<void>(\"SELECT_CREATE_ACCOUNT_BUTTON\"),\n    selectLoginButton: actionCreator<void>(\"SELECT_LOGIN_BUTTON\"),\n    backToTopButton: actionCreator<void>(\"BACK_TO_TOP_BUTTON\")\n}\n\n// アカウント作成に使用するRedux Thunkアクション\nexport const postSignUp = (name: string, email: string, password: string, passwordConfirmed: string): ThunkAction<Promise<void>, AppState, undefined, Action<AppState>> => {\n    return async (dispatch: Dispatch<Action<any>>) => {\n        dispatch(loginActions.loadAllLoginInfo.started({ params: {} }));\n        const REGISTER_ENDPOINT = \"http://localhost:3000/api/v1/register\";\n        await axios.post(REGISTER_ENDPOINT, {\n            user: {\n                name: name,\n                email: email,\n                password: password,\n                password_confirmation: passwordConfirmed\n            }\n        })\n            .then(results => {\n                console.log(results)\n                dispatch(loginActions.loadAllLoginInfo.done({ params: {}, result: results }));\n                if (localStorage.accessToken === undefined) {\n                    localStorage.accessToken = results.data.data.access_token;\n                }\n                if (localStorage.refreshToken === undefined) {\n                    localStorage.refreshToken = results.data.data.refresh_token;\n                }\n            })\n            .catch(error => {\n                console.log(error)\n                dispatch(loginActions.loadAllLoginInfo.failed({ params: {}, error: error }));\n            });\n    }\n}\n\n// ログインに使用するアクション\nexport const loginActions = {\n    inputName: actionCreator<string>(\"INPUT_NAME\"),\n    inputEmail: actionCreator<string>(\"INPUT_EMAIL\"),\n    inputPassword: actionCreator<string>(\"INPUT_PASSWORD\"),\n    inputPasswordConfirmd: actionCreator<string>(\"INPUT_PASSWORD_CONFIRMD\"),\n    pushLoginButton: actionCreator<void>(\"LOGIN_BUTTON\"),\n    loadAllLoginInfo: actionCreator.async<{}, {}, {}>(\"LOAD_ALL_LOGIN_INFO\")\n};\n\n// ログインに使用するRedux Thunkアクション\nexport const postLogIn = (email: string, password: string): ThunkAction<Promise<void>, AppState, undefined, Action<AppState>> => {\n    return async (dispatch: Dispatch<Action<any>>) => {\n        dispatch(loginActions.loadAllLoginInfo.started({ params: {} }));\n        const LOGIN_ENDPOINT = \"http://localhost:3000/api/v1/login\";\n        await axios.post(LOGIN_ENDPOINT, {\n            email: email,\n            password: password\n        })\n            .then(results => {\n                dispatch(loginActions.loadAllLoginInfo.done({ params: {}, result: results }));\n                if (localStorage.accessToken === undefined) {\n                    localStorage.accessToken = results.data.token.access_token;\n                }\n                if (localStorage.refreshToken === undefined) {\n                    localStorage.refreshToken = results.data.token.refresh_token;\n                }\n            })\n            .catch(error => {\n                dispatch(loginActions.loadAllLoginInfo.failed({ params: {}, error: error }));\n            });\n    }\n}\n\n// Main.tsxで使用するボタンアクション\nexport const mainButtonActions = {\n    pushDoListButton: actionCreator<void>(\"DO_LIST_BUTTON\"),\n    pushDoneListButton: actionCreator<void>(\"DONE_LIST_BUTTON\"),\n    slideToggleButton: actionCreator<void>(\"TOOGLE_BUTTON\"),\n    pushPlusButton: actionCreator<void>(\"ADD_PLUS_BUTTON\"),\n    pushCloseButton: actionCreator<void>(\"CLOSE_BUTTON\")\n}\n\n// Todo取得に使用するアクション\nexport const todoActions = {\n    inputTextarea: actionCreator<string>(\"INPUT_TEXTAREA\"),\n    loadAllTodo: actionCreator.async<{}, {}, {}>(\"LOAD_ALL_TODO\"),\n}\n\n// Todo取得に使用するRedux Thunkアクション\nexport const getTodo = (): ThunkAction<Promise<void>, AppState, undefined, Action<AppState>> => {\n    return async (dispatch: Dispatch<Action<any>>) => {\n        dispatch(todoActions.loadAllTodo.started({ params: {} }));\n        const TODO_ENDPOINT = \"http://localhost:3000/api/v1/parent_tasks\";\n        await axios.get(TODO_ENDPOINT, {\n            headers: {\n                \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\n            }\n        })\n            .then(results => {\n                dispatch(todoActions.loadAllTodo.done({ params: {}, result: results.data.data }));\n            })\n            .catch(error => {\n                dispatch(todoActions.loadAllTodo.failed({ params: {}, error: error }));\n            });\n    }\n}\n\n// Todoを追加する\nexport const postTodo = (content: string, progress: number): ThunkAction<Promise<void>, AppState, undefined, Action<AppState>> => {\n    return async (dispatch: Dispatch<Action<any>>) => {\n        dispatch(todoActions.loadAllTodo.started({ params: {} }));\n        const TODO_ENDPOINT = \"http://localhost:3000/api/v1/parent_tasks\";\n        const data = {\n            \"content\": content,\n            \"progress\": progress\n        }\n        const headers = {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\n        }\n        await axios.post(TODO_ENDPOINT, data, { headers: headers })\n            .then(results => {\n                dispatch(todoActions.loadAllTodo.done({ params: {}, result: results.data.data }));\n            })\n            .catch(error => {\n                dispatch(todoActions.loadAllTodo.failed({ params: {}, error: error }))\n            })\n    }\n}\n\n// TodoのProgressをUpdate\nexport const putTodo = (id: number, content: string, progress: number): ThunkAction<Promise<void>, AppState, undefined, Action<AppState>> => {\n    return async (dispatch: Dispatch<Action<any>>) => {\n        dispatch(todoActions.loadAllTodo.started({ params: {} }));\n        const TODO_ENDPOINT = `http://localhost:3000/api/v1/parent_tasks/${id}`;\n        const data = {\n            \"content\": content,\n            \"progress\": progress\n        }\n        const headers = {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"accessToken\")}`\n        }\n        await axios.put(TODO_ENDPOINT, data, { headers: headers })\n            .then(results => {\n                dispatch(todoActions.loadAllTodo.done({ params: {}, result: results.data.data }));\n            })\n            .catch(error => {\n                dispatch(todoActions.loadAllTodo.failed({ params: {}, error: error }))\n            })\n    }\n}","import { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport { loginActions } from \"../actions/actionTypes\";\n\nexport interface LoginState {\n    name: string;\n    email: string;\n    password: string;\n    passwordConfirmd: string;\n    loading: boolean;\n    loginStatus: boolean;\n    results: {\n        data: {\n            token: {\n                access_token: string;\n                refresh_token: string;\n            };\n            user: {\n                name: string;\n            };\n        }\n    }\n}\n\nconst initialState: LoginState = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    passwordConfirmd: \"\",\n    loading: false,\n    loginStatus: false,\n    results: {\n        data: {\n            token: {\n                access_token: \"\",\n                refresh_token: \"\"\n            },\n            user: {\n                name: \"\"\n            }\n        }\n    }\n};\n\nexport const loginReducer = reducerWithInitialState(initialState)\n    .case(loginActions.inputName, (state, name) => {\n        return {\n            ...state,\n            name\n        }\n    })\n    .case(loginActions.inputEmail, (state, email) => {\n        return {\n            ...state,\n            email\n        }\n    })\n    .case(loginActions.inputPassword, (state, password) => {\n        return {\n            ...state,\n            password\n        }\n    })\n    .case(loginActions.inputPasswordConfirmd, (state, passwordConfirmd) => {\n        return {\n            ...state,\n            passwordConfirmd\n        }\n    })\n    .case(loginActions.pushLoginButton, state => {\n        return {\n            ...state\n        }\n    })\n    .case(loginActions.loadAllLoginInfo.started, state => {\n        return {\n            ...state,\n            loading: true,\n            loginStatus: false,\n            error: null\n        }\n    })\n    .case(loginActions.loadAllLoginInfo.done, (state, payload: any) => {\n        return {\n            ...state,\n            loading: false,\n            error: null,\n            loginStatus: true,\n            results: payload.result\n        }\n    })\n    .case(loginActions.loadAllLoginInfo.failed, (state, payload) => {\n        return {\n            ...state,\n            loading: false,\n            loginStatus: false,\n            error: payload.error\n        }\n    })\n","import { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport { todoActions, mainButtonActions } from \"../actions/actionTypes\";\n\nexport interface MainState {\n    textarea: string;\n    loading: boolean;\n    error: any;\n    data: any;\n    doList: boolean;\n    doneList: boolean;\n    toggle: boolean;\n    puls: boolean;\n}\n\nconst initialState: MainState = {\n    textarea: \"\",\n    loading: false,\n    error: null,\n    data: [],\n    doList: false,\n    doneList: false,\n    toggle: true,\n    puls: false,\n};\n\nexport const mainReducer = reducerWithInitialState(initialState)\n    .case(todoActions.inputTextarea, (state, textarea) => {\n        return {\n            ...state,\n            textarea\n        }\n    })\n    .case(todoActions.loadAllTodo.started, state => {\n        return {\n            ...state,\n            loading: true,\n            error: null\n        }\n    })\n    .case(todoActions.loadAllTodo.done, (state, payload) => {\n        return {\n            ...state,\n            loading: false,\n            data: state.data.concat(payload.result),\n            error: null\n        }\n    })\n    .case(todoActions.loadAllTodo.failed, (state, payload) => {\n        return {\n            ...state,\n            loading: false,\n            error: payload.error\n        }\n    })\n    .case(mainButtonActions.pushDoListButton, state => {\n        return {\n            ...state,\n            doList: true\n        }\n    })\n    .case(mainButtonActions.pushDoneListButton, state => {\n        return {\n            ...state,\n            doneList: true\n        }\n    })\n    .case(mainButtonActions.slideToggleButton, state => {\n        return {\n            ...state,\n            toggle: !state.toggle\n        }\n    })\n    .case(mainButtonActions.pushPlusButton, state => {\n        return {\n            ...state,\n            puls: true\n        }\n    })\n    .case(mainButtonActions.pushCloseButton, state => {\n        return {\n            ...state,\n            doList: false,\n            doneList: false,\n            puls: false\n        }\n    })\n","import { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport { selectActions } from \"../actions/actionTypes\";\n\nexport interface SelectState {\n    createAccount: boolean;\n    login: boolean;\n}\n\nconst initialState: SelectState = {\n    createAccount: false,\n    login: false\n}\n\nexport const selectReducer = reducerWithInitialState(initialState)\n    .case(selectActions.selectCreateAccountButton, state => {\n        return {\n            ...state,\n            createAccount: true\n        }\n    })\n    .case(selectActions.selectLoginButton, state => {\n        return {\n            ...state,\n            login: true\n        }\n    })\n    .case(selectActions.backToTopButton, state => {\n        return {\n            ...state,\n            createAccount: false,\n            login: false\n        }\n    })","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { loginReducer, LoginState } from \"./states/loginState\";\nimport { mainReducer, MainState } from \"./states/mainState\";\nimport { selectReducer, SelectState } from \"./states/selectState\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nexport type AppState = {\n    login: LoginState,\n    main: MainState,\n    select: SelectState\n};\n\nconst logger = createLogger({\n    diff: true,\n    collapsed: true,\n})\n\nconst store = createStore(\n    combineReducers<AppState>({\n        login: loginReducer,\n        main: mainReducer,\n        select: selectReducer\n    }),\n    {},\n    applyMiddleware(thunk, logger)\n)\n\nexport default store;","import React, { FC } from \"react\";\nimport icon from \"../../assets/icon.svg\";\nimport \"./Loading.scss\";\n\nconst Loading: FC = props => {\n    return (\n        <div className=\"Loading\">\n            <img\n                className=\"Loading__icon Loading__icon--animation\"\n                src={icon}\n                alt=\"dogressのアイコン\" />\n        </div>\n    )\n}\n\nexport default Loading;\n","import React, { FC } from \"react\";\nimport \"./LoginInputBox.scss\";\n\ninterface LoginInputBoxInterface {\n    placeholder: string;\n    type: \"text\" | \"email\" | \"password\";\n    name: string;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst LoginInputBox: FC<LoginInputBoxInterface> = props => {\n    return (\n        <input\n            className=\"LoginInputBox\"\n            placeholder={props.placeholder}\n            type={props.type}\n            name={props.name}\n            onChange={props.onChange}\n        />\n    )\n}\n\nexport default LoginInputBox;","import React, { FC } from \"react\";\nimport \"./LoginButton.scss\"\n\ninterface LoginButtonInterface {\n    buttonText: string;\n    type: \"button\" | \"submit\" | \"reset\";\n    name: string;\n    value: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst LoginButton: FC<LoginButtonInterface> = props => {\n    return (\n        <button\n            className=\"LoginButton\"\n            type={props.type}\n            name={props.name}\n            value={props.value}\n            onClick={props.onClick}\n        >\n            {props.buttonText}\n        </button>\n    )\n}\n\nexport default LoginButton;","import React, { FC } from \"react\";\nimport \"./ReturnButton.scss\";\n\ninterface ReturnButton {\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst ReturnButton: FC<ReturnButton> = props => {\n    return (\n        <button\n            className=\"ReturnButton\"\n            onClick={props.onClick}\n        >\n            <span className=\"ReturnButton__icon\" />\n        </button>\n    )\n}\n\nexport default ReturnButton;","import React, { FC, useState, useEffect } from \"react\";\nimport LoginInputBox from \"../../components/Login/LoginInputBox\"\nimport LoginButton from \"../../components/Login/LoginButton\";\nimport ReturnButton from \"../../components/Button/ReturnButton\";\nimport { LoginState } from \"../../redux/states/loginState\";\nimport { LoginAction } from \"../../redux/container/loginContainer\";\nimport store from \"../../redux/store\";\nimport { selectActions } from \"../../redux/actions/actionTypes\"\nimport \"./Login.scss\";\n\ntype LoginProps = LoginState & LoginAction;\n\nconst Login: FC<LoginProps> = (props: LoginProps) => {\n    const [createAccount, setCreateAccount] = useState(false);\n\n    useEffect(() => {\n        if (store.getState().select.createAccount === true) {\n            setCreateAccount(true);\n        }\n    }, [])\n\n    return (\n        <div className=\"Login\">\n            <div className=\"Login__inner\">\n                <div className=\"Login__form\">\n                    <ReturnButton\n                        onClick={() => store.dispatch(selectActions.backToTopButton())}\n                    />\n                    {createAccount &&\n                        <div className=\"Login__loginInputBoxMargin\">\n                            <LoginInputBox\n                                placeholder=\"名前\"\n                                type=\"text\"\n                                name=\"text\"\n                                onChange={e => props.inputName(e.target.value)}\n                            />\n                        </div>\n                    }\n                    <div className=\"Login__loginInputBoxMargin\">\n                        <LoginInputBox\n                            placeholder=\"メールアドレス\"\n                            type=\"email\"\n                            name=\"emailText\"\n                            onChange={e => props.inputEmail(e.target.value)}\n                        />\n                    </div>\n                    <div className=\"Login__loginInputBoxMargin\">\n                        <LoginInputBox\n                            placeholder=\"パスワード\"\n                            type=\"password\"\n                            name=\"passwordText\"\n                            onChange={e => props.inputPassword(e.target.value)}\n                        />\n                    </div>\n                    {createAccount &&\n                        <LoginInputBox\n                            placeholder=\"パスワード再入力\"\n                            type=\"password\"\n                            name=\"passwordConfirmdText\"\n                            onChange={e => props.inputPasswordConfirmed(e.target.value)}\n                        />\n                    }\n                    <div className=\"Login__loginButtonMargin\">\n                        <LoginButton\n                            type=\"submit\"\n                            name=\"buttonText\"\n                            value={createAccount ? \"アカウント作成\" : \"ログイン\"}\n                            buttonText={createAccount ? \"アカウント作成\" : \"ログイン\"}\n                            // 関数で発火させないと無限ループ\n                            onClick={() => {\n                                if (createAccount) {\n                                    props.postSignUp(String(props.name), props.email, props.password, String(props.passwordConfirmd));\n                                } else {\n                                    props.postLogIn(props.email, props.password);\n                                }\n                                props.pushLoginButton();\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login;","import { Action } from \"typescript-fsa\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { loginActions, postLogIn, postSignUp } from \"../actions/actionTypes\";\nimport Login from \"../../module/Login/Login\";\n\nexport interface LoginAction {\n    inputName: (inputValue: string) => Action<string>;\n    inputEmail: (inputValue: string) => Action<string>;\n    inputPassword: (inputValue: string) => Action<string>;\n    inputPasswordConfirmed: (inputValue: string) => Action<string>;\n    pushLoginButton: () => Action<void>;\n    postSignUp: (name: string, email: string, password: string, passwordConfirmed: string) => Promise<void>;\n    postLogIn: (email: string, password: string) => Promise<void>;\n}\n\nconst mapStateToProps = (appState: AppState) => {\n    return {\n        ...appState.login\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, undefined, Action<string | void>>) => {\n    return {\n        inputName: (inputValue: string) => dispatch(loginActions.inputName(inputValue)),\n        inputEmail: (inputValue: string) => dispatch(loginActions.inputEmail(inputValue)),\n        inputPassword: (inputValue: string) => dispatch(loginActions.inputPassword(inputValue)),\n        inputPasswordConfirmed: (inputValue: string) => dispatch(loginActions.inputPasswordConfirmd(inputValue)),\n        pushLoginButton: () => dispatch(loginActions.pushLoginButton()),\n        postSignUp: (name: string, email: string, password: string, passwordConfirmed: string) => dispatch(postSignUp(name, email, password, passwordConfirmed)),\n        postLogIn: (email: string, password: string) => dispatch(postLogIn(email, password))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, { FC } from \"react\";\nimport \"./ListButton.scss\";\n\ninterface ListButtonInterface {\n    addClassName?: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst ListButton: FC<ListButtonInterface> = props => {\n    return (\n        <button\n            className={`ListButton ${props.addClassName}`}\n            onClick={props.onClick}\n        />\n    )\n}\n\nexport default ListButton;","import React, { FC } from \"react\";\nimport \"./CloseButton.scss\";\n\ninterface CloseButton {\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst CloseButton: FC<CloseButton> = props => {\n    return (\n        <button\n            className=\"CloseButton\"\n            onClick={props.onClick}\n        />\n    )\n}\n\nexport default CloseButton;","import React, { FC, useState, useEffect } from \"react\";\nimport CloseButton from \"../../components/Button/CloseButton\";\nimport store from \"../../redux/store\";\nimport { mainButtonActions } from \"../../redux/actions/actionTypes\";\nimport \"./List.scss\";\n\ninterface ListInterface {\n    todos: ListResponseData[];\n}\n\nexport interface ListResponseData {\n    id: number;\n    content: string;\n    user_id: number;\n    progress: number;\n    created_at: string;\n    updated_at: string;\n}\n\nconst map = (value: number, fromMin: number, fromMax: number, toMin: number, toMax: number): number => {\n\n    let result = 0;\n    result = value <= fromMin\n        ? toMin\n        : value >= fromMax\n            ? toMax\n            : (() => {\n                let ratio: number = (toMax - toMin) / (fromMax - fromMin);\n                return (value - fromMin) * ratio + toMin;\n            })();\n\n    return result;\n};\n\nconst dateShaping = (value: string, select: string): string => {\n    const processingDate = value.split(\"T\");\n    let date = \"\";\n    switch (true) {\n        case select === \"day\":\n            date = processingDate[0].replace(/-/g, \".\").substr(5, 5);\n            break;\n        case select === \"time\":\n            date = processingDate[1].substr(0, 5);\n            break;\n    }\n    return date;\n}\n\nconst List: FC<ListInterface> = props => {\n    const [doList, setDoList] = useState(false);\n    useEffect(() => {\n        store.getState().main.doList\n            ? setDoList(true)\n            : setDoList(false)\n    }, [])\n    return (\n        <div className=\"List\">\n            <div className=\"List__topArea\">\n                <CloseButton onClick={() => { store.dispatch(mainButtonActions.pushCloseButton()) }} />\n            </div>\n            <ul className=\"List__list\">\n                {props.todos\n                    .filter(item => (\n                        doList\n                            ? item.progress !== 100\n                            : item.progress === 100\n                    ))\n                    .map((item, i) => (\n                        <li className=\"List__item\" key={i}>\n                            {doList\n                                ? <div className=\"List__circle\">\n                                    <span\n                                        className=\"List__circleProgress List__circleProgress--right\"\n                                        style={\n                                            item.progress <= 50\n                                                ? { transform: `rotate(${map(item.progress, 0, 100, 0, 360)}deg)` }\n                                                : { background: \"#4665ff\" }\n                                        }\n                                    />\n                                    <span\n                                        className=\"List__circleProgress List__circleProgress--left\"\n                                        style={\n                                            item.progress > 50\n                                                ? { transform: `rotate(${map(item.progress, 0, 100, 0, 360) - 180}deg)` }\n                                                : {}\n                                        }\n                                    />\n                                    <span className=\"List__circleInner\" />\n                                </div>\n                                : <div className=\"List__success\">\n                                    <span className=\"List__successDay\">{dateShaping(item.updated_at, \"day\")}</span>\n                                    <span className=\"List__successTime\">{dateShaping(item.updated_at, \"time\")}</span>\n                                </div>\n                            }\n                            <p className=\"List__text\">{item.content}</p>\n                        </li>\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default List;\n","import React, { FC } from \"react\";\nimport \"./PlusButton.scss\";\n\ninterface PlusButton {\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst PlusButton: FC<PlusButton> = props => {\n    return (\n        <button\n            className=\"PlusButton\"\n            onClick={props.onClick}\n        />\n    )\n}\n\nexport default PlusButton;","import React, { FC } from \"react\";\nimport \"./Profile.scss\";\n\ninterface ProfileInterface {\n    src: string;\n    alt?: string;\n    name: string;\n}\n\nconst Profile: FC<ProfileInterface> = props => {\n    return (\n        <div className=\"Profile\">\n            <img\n                className=\"Profile__image\"\n                src={props.src}\n                alt={props.alt}\n            />\n            <p className=\"Profile__name\">{props.name}</p>\n        </div>\n    )\n}\n\nexport default Profile;","import React, { FC } from \"react\";\nimport \"./Total.scss\";\n\ninterface Total {\n    title: string;\n    todos: number;\n}\n\nconst Total: FC<Total> = props => {\n    return (\n        <div className=\"Total\">\n            <div className=\"Total__inner\">\n                <h1 className=\"Total__title\">{props.title}</h1>\n                <div className=\"Total__todo\">\n                    <p className=\"Total__number\">{props.todos}</p>\n                    <p className=\"Total__text\">Todos</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Total;","import React, { FC, useState } from \"react\";\nimport store from \"../../redux/store\";\nimport \"./Toggle.scss\";\n\ninterface ToggleInterface {\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Toggle: FC<ToggleInterface> = props => {\n    const [toggle, setToggle] = useState(true);\n    store.subscribe(() => {\n        store.getState().main.toggle\n            ? setToggle(true)\n            : setToggle(false)\n    });\n    return (\n        <div className=\"Toggle\">\n            <input\n                id=\"Toggle\"\n                className=\"Toggle__input\"\n                type=\"checkbox\"\n                onChange={props.onChange}\n            />\n            <label htmlFor=\"Toggle\" className=\"Toggle__label\">\n                {toggle\n                    ? (<span className=\"Toggle__bar\">Do</span>)\n                    : (<span className=\"Toggle__bar\">Done</span>)\n                }\n            </label>\n        </div>\n    )\n}\n\nexport default Toggle;","import React, { FC } from \"react\";\nimport \"./TextArea.scss\";\n\ninterface TextAreaInterface {\n    placeholder: string;\n    onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n}\n\nconst TextArea: FC<TextAreaInterface> = props => {\n    return (\n        <textarea\n            className=\"TextArea\"\n            onChange={props.onChange}\n            rows={8}\n            placeholder={props.placeholder}\n        />\n    )\n}\n\nexport default TextArea;","import React, { FC } from \"react\";\nimport \"./AddTodoButton.scss\";\n\ninterface AddTodoButton {\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst AddTodoButton: FC<AddTodoButton> = props => {\n    return (\n        <button\n            className=\"AddTodoButton\"\n            onClick={props.onClick}\n        >\n            追加する\n        </button>\n    )\n}\n\nexport default AddTodoButton;","import React, { FC } from \"react\";\nimport Profile from \"../../components/Profile/Profile\";\nimport TextArea from \"../../components/TextArea/TextArea\";\nimport AddTodoButton from \"../../components/Button/AddTodoButton\";\nimport CloseButton from \"../../components/Button/CloseButton\";\nimport store from \"../../redux/store\";\nimport { mainButtonActions } from \"../../redux/actions/actionTypes\";\nimport { MainState } from \"../../redux/states/mainState\";\nimport { AddTodoAction } from \"../../redux/container/addTodoContainer\";\nimport \"./AddTodo.scss\";\n\ntype AddTodoProps = MainState & AddTodoAction;\n\nconst AddTodo: FC<AddTodoProps> = (props: AddTodoProps) => {\n    return (\n        <div className=\"AddTodo\">\n            <div className=\"AddTodo__topAreaMargin\">\n                <Profile\n                    src=\"https://66.media.tumblr.com/624be961c064f228f52ceb3d17c00998/tumblr_p9iby2ty8P1vc1y9yo1_1280.jpg\"\n                    alt=\"プロフィール画像\"\n                    name=\"よだっちょ\"\n                />\n                <CloseButton onClick={() => { store.dispatch(mainButtonActions.pushCloseButton()) }} />\n            </div>\n            <div className=\"AddTodo__textareaMargin\">\n                <TextArea\n                    placeholder=\"タスクを追加してみよう！\"\n                    onChange={e => props.inputTextarea(e.target.value.replace(/\\n/g, \" \"))}\n                />\n            </div>\n            <div className=\"AddTodo__AddTodoButtonCenter\">\n                <AddTodoButton\n                    onClick={() => {\n                        props.postTodo(props.textarea, 0);\n                        store.dispatch(mainButtonActions.pushCloseButton());\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default AddTodo;","import { Action } from \"typescript-fsa\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { todoActions, postTodo } from \"../actions/actionTypes\";\nimport AddTodo from \"../../module/AddTodo/AddTodo\";\n\nexport interface AddTodoAction {\n    inputTextarea: (inputValue: string) => Action<string>;\n    postTodo: (content: string, progress: number) => Promise<void>;\n}\n\nconst mapStateToProps = (appState: AppState) => {\n    return {\n        ...appState.main\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, undefined, Action<string | void>>) => {\n    return {\n        inputTextarea: (inputValue: string) => dispatch(todoActions.inputTextarea(inputValue)),\n        postTodo: (content: string, progress: number) => dispatch(postTodo(content, progress))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTodo);","import React, { FC, useState } from \"react\";\nimport { MainState } from \"../../redux/states/mainState\";\nimport { TodoAction } from \"../../redux/container/todoContainer\";\nimport store from \"../../redux/store\";\nimport \"./Todo.scss\";\n\ninterface TodoInterface {\n    todos: TodoResponseData[];\n}\n\nexport interface TodoResponseData {\n    id: number;\n    content: string;\n    user_id: number;\n    progress: number;\n    created_at: string;\n    updated_at: string;\n}\n\nconst dateShaping = (value: string, select: string): string => {\n    const processingDate = value.split(\"T\");\n    let date = \"\";\n    switch (true) {\n        case select === \"day\":\n            date = processingDate[0].replace(/-/g, \".\");\n            break;\n        case select === \"time\":\n            date = processingDate[1].substr(0, 5);\n            break;\n    }\n    return date;\n}\n\n// eventだけでなく、event.currentTargetで渡してあげないと参照する値が変化する\nlet timerId: NodeJS.Timeout;\nlet progressCounter = 0;\nconst downSetInterval = (event: any, itemProgress: number) => {\n    timerId = setInterval(() => {\n        if (itemProgress <= 100) {\n            event.getElementsByTagName(\"span\")[0].style.cssText = `width:${itemProgress++}%`;\n            progressCounter = itemProgress - 1;\n        }\n    }, 50)\n}\n\nconst upClearInterval = (timerId: NodeJS.Timeout) => {\n    clearInterval(timerId);\n}\n\ntype TodoProps = TodoInterface & MainState & TodoAction;\n\nconst Todo: FC<TodoProps> = (props: TodoProps) => {\n    const [doList, setDoList] = useState(false);\n    store.subscribe(() => {\n        store.getState().main.toggle\n            ? setDoList(true)\n            : setDoList(false)\n    });\n    return (\n        <div className=\"Todo\">\n            <ul className=\"Todo__list\">\n                {props.todos\n                    .filter(item => (\n                        doList\n                            ? item.progress !== 100\n                            : item.progress === 100\n                    ))\n                    .map((item, i) => (\n                        <li className=\"Todo__item\" key={i}>\n                            {props.todos.length === 0\n                                ? <div className=\"Todo__box\">\n                                    <div className=\"Todo__boxInner\">\n                                        <p className=\"Todo__text\">「+」ボタンから<br />タスクを追加してみよう！</p>\n                                    </div>\n                                </div>\n                                : <div\n                                    className=\"Todo__box\"\n                                    onMouseDown={e => downSetInterval(e.currentTarget, item.progress)}\n                                    onMouseUp={() => {\n                                        props.putTodo(item.id, item.content, progressCounter);\n                                        upClearInterval(timerId);\n                                    }}\n                                    onTouchStart={e => downSetInterval(e.currentTarget, item.progress)}\n                                    onTouchEnd={() => {\n                                        props.putTodo(item.id, item.content, progressCounter);\n                                        upClearInterval(timerId);\n                                    }}\n                                >\n                                    <div className=\"Todo__boxInner\">\n                                        {doList\n                                            ? <div className=\"Todo__bgBar\">\n                                                <span\n                                                    className=\"Todo__bar\"\n                                                    style={{ width: `${item.progress}%` }}\n                                                />\n                                            </div>\n                                            : <div className=\"Todo__success\">\n                                                <span className=\"Todo__successDay\">{dateShaping(item.updated_at, \"day\")}</span>\n                                                <span className=\"Todo__successTime\">{dateShaping(item.updated_at, \"time\")}</span>\n                                            </div>\n                                        }\n                                        <p className=\"Todo__text\">{item.content}</p>\n                                    </div>\n                                </div>}\n                        </li>\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default Todo;","import { Action } from \"typescript-fsa\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { putTodo } from \"../actions/actionTypes\";\nimport Todo from \"../../components/Todo/Todo\";\n\nexport interface TodoAction {\n    putTodo: (id: number, content: string, progress: number) => Promise<void>;\n}\n\nconst mapStateToProps = (appState: AppState) => {\n    return {\n        ...appState.main\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, undefined, Action<number | void>>) => {\n    return {\n        putTodo: (id: number, content: string, progress: number) => dispatch(putTodo(id, content, progress))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo);","import React, { FC, useState, useEffect } from \"react\";\nimport ListButton from \"../../components/Button/ListButton\";\nimport List from \"../List/List\";\nimport PlusButton from \"../../components/Button/PlusButton\";\nimport Profile from \"../../components/Profile/Profile\";\nimport Total from \"../../components/Total/Total\";\nimport Toggle from \"../../components/Toggle/Toggle\";\nimport { MainState } from \"../../redux/states/mainState\";\nimport { MainAction } from \"../../redux/container/mainContainer\";\nimport AddTodoContainer from \"../../redux/container/addTodoContainer\";\nimport TodoContainer from \"../../redux/container/todoContainer\";\nimport store from \"../../redux/store\";\nimport \"./Main.scss\";\n\ntype MainProps = MainState & MainAction;\n\nconst Main: FC<MainProps> = (props: MainProps) => {\n    const [plusButton, setPlusButton] = useState(false);\n    const [toggleButton, setToggleButton] = useState(true);\n    const [listButton, setListButton] = useState(false);\n    store.subscribe(() => {\n        store.getState().main.puls\n            ? setPlusButton(true)\n            : setPlusButton(false)\n        store.getState().main.toggle\n            ? setToggleButton(true)\n            : setToggleButton(false)\n        store.getState().main.doList || store.getState().main.doneList\n            ? setListButton(true)\n            : setListButton(false)\n    })\n\n    useEffect(() => {\n        setTimeout(() => {\n            props.getTodo();\n        }, 1000)\n    }, []);\n\n    return (\n        <React.Fragment>\n            <div className=\"Main\">\n                <div className=\"Main__bg\" />\n                <div className=\"Main__inner\">\n                    <div className=\"Main__topArea\">\n                        <Profile\n                            src=\"https://66.media.tumblr.com/624be961c064f228f52ceb3d17c00998/tumblr_p9iby2ty8P1vc1y9yo1_1280.jpg\"\n                            alt=\"プロフィール画像\"\n                            name=\"よだっちょ\"\n                        />\n                        <ListButton\n                            addClassName={\n                                toggleButton\n                                    ? \"\"\n                                    : \"ListButton--done\"\n                            }\n                            onClick={toggleButton\n                                ? props.pushDoListButton\n                                : props.pushDoneListButton\n                            }\n                        />\n                    </div>\n                    <div className=\"Main__totalMargin\">\n                        <Total\n                            title={toggleButton ? \"Do\" : \"Done\"}\n                            todos={props.data.length}\n                        />\n                    </div>\n                    <div className=\"Main__toggleMargin\">\n                        <Toggle onChange={props.slideToggleButton} />\n                    </div>\n                    <div className=\"Main__todoMargin\">\n                        <TodoContainer todos={props.data} />\n                    </div>\n                    <div className=\"Main__plusButtonCenter\">\n                        <PlusButton onClick={props.pushPlusButton} />\n                    </div>\n                </div>\n            </div>\n            {plusButton && <AddTodoContainer />}\n            {listButton && <List todos={props.data} />}\n        </React.Fragment>\n    )\n}\n\nexport default Main;","import { Action } from \"typescript-fsa\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { mainButtonActions, getTodo } from \"../actions/actionTypes\";\nimport Main from \"../../module/Main/Main\";\n\nexport interface MainAction {\n    pushDoListButton: () => Action<void>;\n    pushDoneListButton: () => Action<void>;\n    slideToggleButton: () => Action<void>;\n    pushPlusButton: () => Action<void>;\n    pushCloseButton: () => Action<void>;\n    getTodo: () => Promise<void>;\n}\n\nconst mapStateToProps = (appState: AppState) => {\n    return {\n        ...appState.main\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AppState, undefined, Action<void>>) => {\n    return {\n        pushDoListButton: () => dispatch(mainButtonActions.pushDoListButton()),\n        pushDoneListButton: () => dispatch(mainButtonActions.pushDoneListButton()),\n        slideToggleButton: () => dispatch(mainButtonActions.slideToggleButton()),\n        pushPlusButton: () => dispatch(mainButtonActions.pushPlusButton()),\n        pushCloseButton: () => dispatch(mainButtonActions.pushCloseButton()),\n        getTodo: () => dispatch(getTodo()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React, { FC } from \"react\";\nimport \"./LoginSNS.scss\";\n\ninterface LoginSNSInterface {\n    src: string;\n    alt?: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst LoginInputBox: FC<LoginSNSInterface> = props => {\n    return (\n        <button\n            className=\"LoginSNS\"\n            onClick={props.onClick}\n        >\n            <img\n                src={props.src}\n                alt={props.alt}\n            />\n        </button>\n    )\n}\n\nexport default LoginInputBox;","import icon from \"../../assets/icon.svg\"\nimport image from \"../../assets/twitter.svg\";\nimport React, { FC } from \"react\";\nimport LoginButton from \"../../components/Login/LoginButton\";\nimport LoginSNS from \"../../components/Login/LoginSNS\";\nimport { SelectState } from \"../../redux/states/selectState\";\nimport { SelectAction } from \"../../redux/container/selectContainer\";\nimport \"./Welcome.scss\";\n\ntype SelectProps = SelectState & SelectAction;\n\nconst Welcome: FC<SelectProps> = (props: SelectProps) => {\n    return (\n        <div className=\"Welcome\">\n            <div className=\"Welcome__inner\">\n                <p className=\"Welcome__concept\">「いま」やらないと<br />いけないことを<br />整理しよう</p>\n                <img\n                    className=\"Welcome__icon\"\n                    src={icon}\n                    alt=\"dogressのアイコン\" />\n                <div className=\"Welcome__loginButtonMargin\">\n                    <LoginButton\n                        type=\"submit\"\n                        name=\"buttonText\"\n                        value=\"アカウントを作成\"\n                        buttonText=\"アカウント作成\"\n                        onClick={() => props.selectCreateAccountButton()}\n                    />\n                </div>\n                <LoginButton\n                    type=\"submit\"\n                    name=\"buttonText\"\n                    value=\"ログイン\"\n                    buttonText=\"ログイン\"\n                    onClick={() => props.selectLoginButton()}\n                />\n                <p className=\"Welcome__text\">または</p>\n                <LoginSNS\n                    src={image}\n                    alt=\"Twitterロゴ\"\n                    onClick={() => window.location.href = \"http://localhost:3000/api/v1/oauth/twitter\"}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Welcome;","import { Action } from \"typescript-fsa\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../store\";\nimport { Dispatch } from \"redux\";\nimport { selectActions } from \"../actions/actionTypes\";\nimport Welcome from \"../../module/Welcome/Welcome\";\n\nexport interface SelectAction {\n    selectCreateAccountButton: () => Action<void>;\n    selectLoginButton: () => Action<void>;\n    backToTopButton: () => Action<void>;\n}\n\nconst mapStateToProps = (appState: AppState) => {\n    return {\n        ...appState.select\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action<void>>) => {\n    return {\n        selectCreateAccountButton: () => dispatch(selectActions.selectCreateAccountButton()),\n        selectLoginButton: () => dispatch(selectActions.selectLoginButton()),\n        backToTopButton: () => dispatch(selectActions.backToTopButton())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Welcome);","import React, { FC, useState, useEffect } from \"react\";\nimport Loading from \"./module/Loading/Loading\";\nimport LoginContainer from \"./redux/container/loginContainer\";\nimport MainContainer from \"./redux/container/mainContainer\";\nimport SelectContainer from \"./redux/container/selectContainer\";\nimport store from \"./redux/store\";\n\nconst App: FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [loginStatus, setLoginStatus] = useState(false);\n  const [select, setSelect] = useState(false);\n\n  const setLoadingTime = (timeout: number): void => {\n    setTimeout(() => {\n      setLoading(false);\n    }, timeout);\n  }\n\n  store.subscribe(() => {\n    if (store.getState().login.loginStatus) {\n      setLoginStatus(true);\n    }\n    store.getState().login.loading || store.getState().main.loading\n      ? setLoading(true)\n      : setLoadingTime(1000);\n    store.getState().select.createAccount || store.getState().select.login\n      ? setSelect(true)\n      : setSelect(false);\n  });\n\n  useEffect(() => {\n    if (localStorage.accessToken !== undefined) {\n      setLoginStatus(true);\n    } else {\n      setLoadingTime(1000);\n    }\n  }, [])\n\n  return (\n    <React.Fragment>\n      {loading && <Loading />}\n      {loginStatus ? <MainContainer /> :\n        <React.Fragment>\n          {select ? <LoginContainer /> : <SelectContainer />}\n        </React.Fragment>\n      }\n    </React.Fragment>\n  )\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./redux/store\"\nimport App from \"./App\"\nimport \"./scss/reset.scss\";\nimport \"./scss/base.scss\";\n\nReactDOM.render(\n    <Provider store={Store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\") as HTMLElement\n);"],"sourceRoot":""}